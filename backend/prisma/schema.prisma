// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== SISTEMA SAAS - NOVAS TABELAS =====

model Empresa {
  id            String        @id @default(cuid())
  nome          String
  emailContato  String
  telefone      String?
  endereco      String?
  cidade        String?
  estado        String?
  cep           String?
  status        EmpresaStatus @default(ATIVA)
  planoId       String?
  plano         Plano?        @relation(fields: [planoId], references: [id])
  usuarios      User[]        @relation("UsuariosEmpresa")
  eventos       Event[]
  faturas       Fatura[]
  setores       Setor[]
  criadoEm      DateTime      @default(now())
  atualizadoEm  DateTime      @updatedAt
  createdById   String?
  createdBy     User?         @relation("CriadorEmpresa", fields: [createdById], references: [id])

  @@map("empresas")
}

model Plano {
  id                String    @id @default(cuid())
  nome              String
  preco             Float
  descricao         String?
  limiteEventos     Int
  limiteConvidados  Int
  limiteEmpresas    Int?      // Para planos white-label
  faturas           Fatura[]
  empresas          Empresa[]
  criadoEm          DateTime  @default(now())
  atualizadoEm      DateTime  @updatedAt

  @@map("planos")
}

model Fatura {
  id          String        @id @default(cuid())
  empresaId   String
  empresa     Empresa       @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  planoId     String?
  plano       Plano?        @relation(fields: [planoId], references: [id])
  valor       Float
  status      FaturaStatus  @default(PENDENTE)
  vencimento  DateTime
  pagamentoEm DateTime?
  criadoEm    DateTime      @default(now())
  atualizadoEm DateTime     @updatedAt

  @@map("faturas")
}

model AdminMaster {
  id        String        @id @default(cuid())
  email     String        @unique
  nome      String
  senha     String
  nivel     AdminNivel    @default(SUPORTE)
  ativo     Boolean       @default(true)
  criadoEm  DateTime      @default(now())
  atualizadoEm DateTime   @updatedAt

  // Logs de ações
  logs      AdminLog[]

  @@map("admin_masters")
}

model AdminLog {
  id          String    @id @default(cuid())
  adminId     String
  admin       AdminMaster @relation(fields: [adminId], references: [id], onDelete: Cascade)
  acao        String    // "BLOQUEAR_EMPRESA", "CRIAR_PLANO", etc.
  detalhes    Json?     // Dados adicionais da ação
  criadoEm    DateTime  @default(now())

  @@map("admin_logs")
}

// ===== ENUMS DO SISTEMA SAAS =====

enum EmpresaStatus {
  ATIVA
  BLOQUEADA
}

enum FaturaStatus {
  PAGO
  PENDENTE
  VENCIDA
}

enum AdminNivel {
  MASTER      // Acesso total
  SUPORTE     // Acesso limitado
  LEITURA     // Apenas visualização
}

// ===== MODELOS EXISTENTES (ATUALIZADOS) =====

model Company {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  users  User[]
  events Event[]

  @@map("companies")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  telefone  String?
  nomeEmpresa String?
  role      UserRole @default(ORGANIZER)
  nivel     UserNivel @default(CHECKIN)
  ativo     Boolean  @default(true)
  eventosIds Json?
  trabalharTodosEventos Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  fotoPerfil String?
  endereco String?
  cpf String?
  dataNascimento DateTime?
  pix String?
  trabalhou Boolean?
  diasTrabalhados Json?
  eventosTrabalhados Json?
  pagamentos Json?
  foiPago Boolean?
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  empresaId String?
  empresa   Empresa? @relation("UsuariosEmpresa", fields: [empresaId], references: [id], onDelete: SetNull)
  empresasCriadas Empresa[]   @relation("CriadorEmpresa")
  events Event[]
  eventOrganizers EventOrganizer[]
  sentInvites TeamInvite[]
  podeGerenciarDemandas Boolean @default(false)
  demandasDemanda  Demanda[] @relation("UsuariosResponsaveisDemanda")
  demandasCriadas  Demanda[] @relation("UserCriadorDemanda")
  agendamentosCriados Agendamento[] @relation("UserAgendamentosCriados")
  notifications Notification[]
  observacoesCriadas Observacao[] @relation("ObservacoesDoAutor")
  arquivosUploadados ArquivoDemanda[] @relation("ArquivosUploadados")
  @@map("users")
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  date        DateTime
  location    String
  maxGuests   Int?
  imageUrl    String?
  customSlug  String?  @unique // URL personalizada para o evento
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(false)
  registrationPaused Boolean @default(false)  // Pausar inscrições manualmente
  registrationPauseUntil DateTime?  // Pausar inscrições até uma data específica
  customFields Json?   // Campos personalizados do evento
  formConfig  Json?    // Configuração do formulário de inscrição
  publicPageConfig Json? // Configuração da página pública do evento
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  // Relacionamento com Empresa (SaaS)
  empresaId String?
  empresa   Empresa? @relation(fields: [empresaId], references: [id], onDelete: SetNull)
  
  // Criador do evento (mantém compatibilidade)
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Organizadores do evento
  organizers EventOrganizer[]
  
  // Convites da equipe
  teamInvites TeamInvite[]
  
  guests    Guest[]
  checkIns  CheckIn[]
  subEventos SubEvento[]

  @@map("events")
}

model EventOrganizer {
  id        String   @id @default(cuid())
  role      OrganizerRole @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  eventId  String
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_organizers")
}

model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  role      OrganizerRole @default(EDITOR)
  status    InviteStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  eventId String
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  invitedById String
  invitedBy   User     @relation(fields: [invitedById], references: [id], onDelete: Cascade)

  @@map("team_invites")
}

model Guest {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  confirmed   Boolean   @default(false)
  confirmedAt DateTime?
  qrCode      String    @unique
  customFields Json?    // Campos personalizados do convidado
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  checkIns  CheckIn[]
  consumos  Consumo[]

  @@map("guests")
}

model CheckIn {
  id        String   @id @default(cuid())
  checkedInAt DateTime @default(now())
  
  // Relacionamentos
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  guestId   String
  guest     Guest     @relation(fields: [guestId], references: [id], onDelete: Cascade)

  @@unique([eventId, guestId])
  @@map("check_ins")
}

model SubEvento {
  id            String   @id @default(cuid())
  nome          String
  descricao     String?
  dataHora      DateTime
  local         String?
  limitePorConvidado Int @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  eventoId      String
  evento        Event     @relation(fields: [eventoId], references: [id], onDelete: Cascade)
  consumos      Consumo[]

  @@map("sub_eventos")
}

model Consumo {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())

  // Relacionamentos
  convidadoId   String
  convidado     Guest     @relation(fields: [convidadoId], references: [id], onDelete: Cascade)
  subEventoId   String
  subEvento     SubEvento @relation(fields: [subEventoId], references: [id], onDelete: Cascade)

  @@unique([convidadoId, subEventoId])
  @@map("consumos")
}

// ===== ENUMS EXISTENTES =====

enum UserRole {
  ADMIN
  ORGANIZER
}

enum UserNivel {
  CHECKIN   // Apenas check-in
  EDITOR    // Editor de página + check-in
  ADMIN     // Administrador da empresa
  PROPRIETARIO // Proprietário da empresa
}

enum OrganizerRole {
  OWNER    // Dono do evento (pode fazer tudo)
  EDITOR   // Editor (pode criar, editar, fazer check-in)
  CHECKIN  // Apenas check-in
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model Setor {
  id        String    @id @default(uuid())
  nome      String
  empresaId String
  empresa   Empresa   @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  demandas  Demanda[]
  @@map("setores")
}

model Demanda {
  id             String      @id @default(uuid())
  solicitacao    String      @unique
  numeroFluig    String?
  nomeProjeto    String
  descricao      String?     // Descrição/detalhes da demanda
  solicitante    String
  prioridade     String      // ALTA, MEDIA, BAIXA
  status         String      // ABERTO, EM_ANDAMENTO, CONCLUIDO, PAUSADO
  dataAbertura   DateTime
  dataEntrega    DateTime
  dataTermino    DateTime?
  linkPastaProjeto String?
  linkSite         String?
  arquivada       Boolean     @default(false)  // Campo para arquivamento
  dataArquivamento DateTime?  // Data quando foi arquivada
  setorId        String
  setor          Setor       @relation(fields: [setorId], references: [id])
  responsaveis   User[]   @relation("UsuariosResponsaveisDemanda")
  observacoes    Observacao[]
  arquivos       ArquivoDemanda[]
  criadoPorId    String
  criadoPor      User        @relation("UserCriadorDemanda", fields: [criadoPorId], references: [id])
  @@map("demandas")
}

model Observacao {
  id         String   @id @default(uuid())
  texto      String
  data       DateTime @default(now())
  autorId    String
  autor      User     @relation("ObservacoesDoAutor", fields: [autorId], references: [id])
  demandaId  String
  demanda    Demanda  @relation(fields: [demandaId], references: [id])
  @@map("observacoes")
}

model ArquivoDemanda {
  id          String   @id @default(uuid())
  nomeOriginal String
  nomeArquivo  String  // Nome único do arquivo no servidor
  caminho      String  // Caminho relativo do arquivo
  tamanho      Int     // Tamanho em bytes
  tipoMime     String  // Tipo MIME do arquivo
  demandaId    String
  demanda      Demanda @relation(fields: [demandaId], references: [id], onDelete: Cascade)
  uploadPorId  String
  uploadPor    User    @relation("ArquivosUploadados", fields: [uploadPorId], references: [id])
  criadoEm     DateTime @default(now())
  
  @@map("arquivos_demanda")
}

// ===== AGENDAMENTOS =====

enum Visibilidade {
  PRIVADO
  EQUIPE
}

model Agendamento {
  id                   String      @id @default(uuid())
  titulo               String
  descricao            String?
  dataInicio           DateTime
  dataFim              DateTime
  categoria            String
  lembreteMinutosAntes Int
  criadoPorId          String
  criadoPor            User        @relation("UserAgendamentosCriados", fields: [criadoPorId], references: [id])
  equipeId             String
  visibilidade         Visibilidade
  criadoEm             DateTime    @default(now())
}

model Notification {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  titulo         String
  mensagem       String
  tipo           String        // NOVA_DEMANDA, OBSERVACAO, etc.
  dados          Json?         // Dados adicionais da notificação
  lida           Boolean       @default(false)
  criadoEm       DateTime      @default(now())
  
  @@map("notifications")
} 