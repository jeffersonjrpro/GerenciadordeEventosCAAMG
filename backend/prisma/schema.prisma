// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  users  User[]
  events Event[]

  @@map("companies")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(ORGANIZER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  // Eventos criados pelo usuário (mantém compatibilidade)
  events Event[]
  
  // Organizadores de eventos
  eventOrganizers EventOrganizer[]
  
  // Convites enviados
  sentInvites TeamInvite[]

  @@map("users")
}

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  date        DateTime
  location    String
  maxGuests   Int?
  imageUrl    String?
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(false)
  registrationPaused Boolean @default(false)  // Pausar inscrições manualmente
  registrationPauseUntil DateTime?  // Pausar inscrições até uma data específica
  customFields Json?   // Campos personalizados do evento
  formConfig  Json?    // Configuração do formulário de inscrição
  publicPageConfig Json? // Configuração da página pública do evento
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  // Criador do evento (mantém compatibilidade)
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Organizadores do evento
  organizers EventOrganizer[]
  
  // Convites da equipe
  teamInvites TeamInvite[]
  
  guests    Guest[]
  checkIns  CheckIn[]
  subEventos SubEvento[]

  @@map("events")
}

model EventOrganizer {
  id        String   @id @default(cuid())
  role      OrganizerRole @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  eventId  String
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_organizers")
}

model TeamInvite {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  role      OrganizerRole @default(EDITOR)
  status    InviteStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  eventId String
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  invitedById String
  invitedBy   User     @relation(fields: [invitedById], references: [id], onDelete: Cascade)

  @@map("team_invites")
}

model Guest {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  confirmed   Boolean   @default(false)
  confirmedAt DateTime?
  qrCode      String    @unique
  customFields Json?    // Campos personalizados do convidado
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  checkIns  CheckIn[]
  consumos  Consumo[]

  @@map("guests")
}

model CheckIn {
  id        String   @id @default(cuid())
  checkedInAt DateTime @default(now())
  
  // Relacionamentos
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  guestId   String
  guest     Guest     @relation(fields: [guestId], references: [id], onDelete: Cascade)

  @@unique([eventId, guestId])
  @@map("check_ins")
}

model SubEvento {
  id            String   @id @default(cuid())
  nome          String
  descricao     String?
  dataHora      DateTime
  local         String?
  limitePorConvidado Int @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  eventoId      String
  evento        Event     @relation(fields: [eventoId], references: [id], onDelete: Cascade)
  consumos      Consumo[]

  @@map("sub_eventos")
}

model Consumo {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())

  // Relacionamentos
  convidadoId   String
  convidado     Guest     @relation(fields: [convidadoId], references: [id], onDelete: Cascade)
  subEventoId   String
  subEvento     SubEvento @relation(fields: [subEventoId], references: [id], onDelete: Cascade)

  @@unique([convidadoId, subEventoId])
  @@map("consumos")
}

enum UserRole {
  ADMIN
  ORGANIZER
}

enum OrganizerRole {
  OWNER    // Dono do evento (pode fazer tudo)
  EDITOR   // Editor (pode criar, editar, fazer check-in)
  CHECKIN  // Apenas check-in
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
} 